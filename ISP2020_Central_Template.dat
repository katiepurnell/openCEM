# NEM ISP2020 Central template scenario (build_cost_scenario_id=7, source_id=3)
set regions :=
[regions];

set zones :=
[zones];

set all_tech :=
[alltech];
# Set of generator technologies available in each zone
set gen_tech_in_zones :=
[gentech];

# Set of generator technologies that can be retired by the model
set retire_gen_tech_in_zones :=
[retiretech];

# Set of emitting/fuel generator technologies
set fuel_gen_tech_in_zones :=
[fueltech];

# Set of emitting/fuel generator technologies
set commit_gen_tech_in_zones :=
[committech];


# Set of renewable energy generator technologies
set re_gen_tech_in_zones :=
[regentech];

# Set of dispatchable generators
set disp_gen_tech_in_zones :=
[dispgentech];

# Set of dispatchable generators
set re_disp_gen_tech_in_zones :=
[redispgentech];

#Set of storage technologies in each zones
set stor_tech_in_zones :=
[stortech];

# Set of hybrid technologies available in each zone
set hyb_tech_in_zones :=
[hybtech];

# Set of ev technologies available in each zone
set ev_tech_in_zones :=
[evtech];

#Retrieve fuel costs for defined technologies
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(fuel.price) as cost_fuel
FROM fuel_price fuel
INNER JOIN capacity cap ON cap.id=fuel.capacity_id
WHERE fuel.year=XXXX AND fuel.fuel_scenario_id =3
AND (cap.ntndp_zone_id,cap.technology_type_id) in
[fueltechdb]
AND cap.source_id = 3
AND fuel.fuel_scenario_id=7
group by zones,all_tech;" :[zones,all_tech] cost_fuel;

#Retrieve fuel heat rates for default technologies
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(heat.heat_rate) as fuel_heat_rate
FROM heat_rates heat
INNER JOIN capacity cap ON cap.id=heat.capacity_id
AND (cap.ntndp_zone_id,cap.technology_type_id) in
[fueltechdb]
AND cap.source_id = 3
AND heat.source_id = 7
group by zones,all_tech;" :[zones,all_tech] fuel_heat_rate;

#Ordered set of timestamps to retrieve traces for dispatch calculations
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
format=set
query="SELECT DISTINCT cast(timestamp AS CHAR)
FROM demand_and_rooftop_traces
WHERE timestamp [timerange]
AND demand_scenario_id = 7
AND MINUTE(timestamp)=0;" :t;

# Build costs for gentech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_gen_build
FROM capex
WHERE year=XXXX
AND (build_cost_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(build_cost_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE build_cost_scenario_id IN (7,1)
  AND (ntndp_zone_id, technology_type_id) IN
  [gentechdb]
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_gen_build;

# Build costs for stortech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_stor_build
FROM capex
WHERE year=XXXX
AND (build_cost_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(build_cost_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE build_cost_scenario_id IN (7,1)
  AND (ntndp_zone_id, technology_type_id) IN
  [stortechdb]
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_stor_build;

# Build costs for hybtech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_hyb_build
FROM capex
WHERE year=XXXX
AND (build_cost_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(build_cost_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE build_cost_scenario_id IN (7,1)
  AND (ntndp_zone_id, technology_type_id) IN
  [hybtechdb]
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_hyb_build;

# FOM VOM costs for gentech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT technology_type_id AS all_tech, 1000*fom AS cost_gen_fom, vom AS cost_gen_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in ([gentechlist]) GROUP BY technology_type_id);": [all_tech] cost_gen_fom cost_gen_vom;

# FOM VOM costs for stortech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_stor_fom, vom AS cost_stor_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in ([stortechlist]) GROUP BY technology_type_id);": [all_tech] cost_stor_fom cost_stor_vom;

# FOM VOM costs for hybtech
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_hyb_fom, vom AS cost_hyb_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in ([hybtechlist]) GROUP BY technology_type_id);": [all_tech] cost_hyb_fom cost_hyb_vom;

#Starting capacity (either from capacity table or carry forward from previous)
[carryforwardcap]

#Load carry_forward costs from openCEM_cap_hist
load "cemo/openCEM_cap_hist.db" using=sqlite3
query="SELECT ntndp_zone_id as zone, sum(annualised_capex) as cost_cap_carry_forward_hist
FROM NEM_fleet
WHERE zone in ([zoneslist])
AND commissioning_year < 2018
AND years_to_EOL_2020-(XXXX-2020)>0
group by ntndp_zone_id": [zone] cost_cap_carry_forward_hist;

# Exogenously commissioned capacity
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
[gentechdb] and commissioning_year >WWWW and commissioning_year<=XXXX
AND source_id=3
group by zones,all_tech;" : [zones,all_tech] gen_cap_exo;

load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as stor_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
[stortechdb] and commissioning_year >WWWW and commissioning_year<=XXXX
AND source_id=3
group by zones,all_tech;" : [zones,all_tech] stor_cap_exo;

load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as hyb_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
[hybtechdb] and commissioning_year >WWWW and commissioning_year<=XXXX
AND source_id=3
group by zones,all_tech;" : [zones,all_tech] hyb_cap_exo;


# Exogenously retired capacity
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as ret_gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
[retiretechdb] and retirement_year >WWWW and retirement_year<=XXXX
AND source_id=3
group by zones,all_tech;" : [zones,all_tech] ret_gen_cap_exo;

#capacity factors for technologies with traces
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS gen_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp [timerange]
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN [gentechdb]
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] gen_cap_factor;

load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS hyb_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp [timerange]
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN [hybtechdb]
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] hyb_cap_factor;

#Demand for all regions for the given time interval - ISP2020
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cast(poe.timestamp AS CHAR) AS t, poe.region_id AS regions, (poe.opso_poe10 -0*roof.pv_tot) AS region_net_demand
FROM demand_and_rooftop_traces poe
INNER JOIN (SELECT timestamp, region_id, pv_tot FROM demand_and_rooftop_traces
WHERE timestamp [timerange]
AND MINUTE(timestamp)=0
AND demand_and_rooftop_traces.demand_scenario_id =7) roof
ON poe.timestamp = roof.timestamp AND poe.region_id = roof.region_id
AND poe.demand_scenario_id =7
AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))
order BY regions,t;": [regions,t] region_net_demand;
# KP_MODIFIED AND poe.region_id in ([regions]) AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))

#Demand for all regions for the given time interval WITHOUT THE EV TRACE FROM AEMO #KP_MODIFIED_170820
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cast(poe.timestamp AS CHAR) AS t, poe.region_id AS regions, (poe.opso_poe10 -0*roof.pv_tot -1*roof.ev) AS region_net_demand_less_evs
FROM demand_and_rooftop_traces poe
INNER JOIN (SELECT timestamp, region_id, pv_tot, ev FROM demand_and_rooftop_traces
WHERE timestamp [timerange]
AND MINUTE(timestamp)=0
AND demand_and_rooftop_traces.demand_scenario_id =7) roof
ON poe.timestamp = roof.timestamp AND poe.region_id = roof.region_id
AND poe.demand_scenario_id =7
# AND poe.region_id in ([regions])
AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))
order BY regions,t;": [regions,t] region_net_demand_less_evs;

#Gather the AEMO EV Demand for all regions for the given time interval #KP_MODIFIED_170820
load "opencem-isp2020.cyisekdyolmb.ap-southeast-2.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cast(poe.timestamp AS CHAR) AS t, poe.region_id AS regions, (poe.ev) AS aemo_ev
FROM demand_and_rooftop_traces poe
INNER JOIN (SELECT timestamp, region_id, ev FROM demand_and_rooftop_traces
WHERE timestamp [timerange]
AND MINUTE(timestamp)=0
AND demand_and_rooftop_traces.demand_scenario_id =7) roof
ON poe.timestamp = roof.timestamp AND poe.region_id = roof.region_id
AND poe.demand_scenario_id =7
#AND poe.region_id in ([regions])
AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))
order BY regions,t;": [regions,t] aemo_ev;

###############################################################################
###### READING IN EV TRACES
###############################################################################

#KP_MODIFIED_180820 - READ IN THE PROPORTION OF vehicles CONNECTED AT T
load '127.0.0.1' database=em_kp_2020
user=root password="mEow!5678!" using=pymysql
query="
SELECT t1.zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(t1.proportion_connected) AS ev_connected, t1.scenario_id, t1.profile_id
FROM connected t1
INNER JOIN (SELECT technology_type_id, zone_id, profile_id, scenario_id, timestamp
              FROM connected
              WHERE timestamp [timerange]
                  AND MINUTE(timestamp)=0
                  AND (zone_id, technology_type_id) IN [evtechdb]
              GROUP BY zone_id, technology_type_id, timestamp) as t2
        ON t1.zone_id = t2.zone_id
            AND t1.technology_type_id = t2.technology_type_id
            AND t1.timestamp = t2.timestamp
            AND t2.profile_id = 1 AND t2.scenario_id = 1
GROUP BY t1.zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] ev_connected;
# KP_MODIFIED_310820 - replaced [evtechdb] with [evtechlist]. Added t1.scenario_id, t1.profile_id to the first select line. Added fields to the inner join select line (previously just had timestamp)
#KP_MODIFIED_030920 to include zones again -> updated database after struggling to make a non-zone specific option work. proportion_connected


#KP_MODIFIED_180820 - READ IN THE CHARGING TRACE
load '127.0.0.1' database=em_kp_2020
user=root password="mEow!5678!" using=pymysql
query="
SELECT t1.zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(t1.kw) AS ev_charge_dumb_trace, t1.scenario_id, t1.profile_id
FROM charging t1
INNER JOIN (SELECT technology_type_id, zone_id, timestamp, profile_id, scenario_id
            FROM charging
            WHERE timestamp [timerange]
                AND MINUTE(timestamp)=0
                AND (zone_id, technology_type_id) IN [evtechdb]
            GROUP BY zone_id, technology_type_id, timestamp) as t2
    on t1.zone_id = t2.zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.profile_id = 1
       AND t1.scenario_id = 1
GROUP BY t1.zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] ev_charge_dumb_trace;
# KP_MODIFIED_310820 - replaced [evtechdb] with [evtechlist]. Added t1.scenario_id, t1.profile_id to the first select line. Added fields to the inner join select line (previously just had timestamp)
#KP_MODIFIED_030920 to include zones again -> updated database after struggling to make a non-zone specific option work.

#KP_MODIFIED_180820 - READ IN THE TRANSPORT TRACE
load '127.0.0.1' database=em_kp_2020
user=root password="mEow!5678!" using=pymysql
query="
SELECT t1.zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(t1.kw) AS ev_trans_trace, t1.scenario_id, t1.profile_id
FROM transport t1
INNER JOIN (SELECT technology_type_id, zone_id, timestamp, profile_id, scenario_id
            FROM transport
            WHERE timestamp [timerange]
                AND MINUTE(timestamp)=0
                AND (zone_id, technology_type_id) IN [evtechdb]
            GROUP BY zone_id, technology_type_id, timestamp) as t2
    on t1.zone_id = t2.zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.profile_id = 1
       AND t1.scenario_id = 1
GROUP BY t1.zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] ev_trans_trace;
# KP_MODIFIED_310820 - replaced [evtechdb] with [evtechlist]. Added t1.scenario_id, t1.profile_id to the first select line. Added fields to the inner join select line (previously just had timestamp)
#KP_MODIFIED_030920 to include zones again -> updated database after struggling to make a non-zone specific option work.
